# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-i7_KrO2Q9gO9f529aleedcQWqR2Y9qe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as mlt

dataset = pd.read_csv('Social_Network_Ads.csv')
X= dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

print(X)
#array size N*2

print(y)



"""Spliting dataset into training set and testing set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state = 0)

"""Feature Scale the Estimated salary"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

print(X_test)

from sklearn.tree import DecisionTreeClassifier
classifier =DecisionTreeClassifier(criterion ='log_loss', random_state=0)

classifier.fit(X_train,y_train)

"""Prediciting result"""

print(classifier.predict(sc.transform([[30,60000]])))

"""Prediction for whole y_test"""

y_pred = classifier.predict(X_test)
#here , we concatenate the prediction with
#our testing set, to check whether the prediction is right or not
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test,y_pred)
print(cm)
ac = accuracy_score(y_test,y_pred)
print(ac)

# Save the model to a file
import pickle
with open('decision_tree_model.pkl', 'wb') as file:
    pickle.dump(classifier, file)